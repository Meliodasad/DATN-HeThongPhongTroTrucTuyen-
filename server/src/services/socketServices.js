const usersMap = new Map();
global.usersMap = usersMap;

const cookie = require('cookie');
const { verifyToken } = require('./tokenSevices');

class SocketServices {
    connection(socket) {
        try {
            // Parse cookie t·ª´ header
            const { token } = cookie.parse(socket.handshake.headers.cookie || '');
            console.log('Cookie nh·∫≠n ƒë∆∞·ª£c:', socket.handshake.headers.cookie); // log th√™m cho d·ªÖ debug

            if (!token) {
                console.warn('Kh√¥ng t√¨m th·∫•y token trong cookie');
                return socket.disconnect();
            }

            verifyToken(token)
                .then((dataDecode) => {
                    if (dataDecode) {
                        // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o map khi k·∫øt n·ªëi th√†nh c√¥ng
                        usersMap.set(dataDecode.id.toString(), socket);
                        console.log(`‚úÖ User connected: ${dataDecode.id}`);

                        // G·ª≠i th√¥ng b√°o test ƒë·∫øn client khi connect
                        socket.emit('welcome', { message: 'K·∫øt n·ªëi socket th√†nh c√¥ng üéâ' });

                        // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ng·∫Øt k·∫øt n·ªëi
                        socket.on('disconnect', (reason) => {
                            console.log(`‚ùå User disconnected: ${dataDecode.id}, reason: ${reason}`);
                            usersMap.delete(dataDecode.id.toString());
                        });

                        // Th√™m 1 event gi·∫£ ƒë·ªÉ test
                        socket.on('ping-server', () => {
                            console.log(`üì° Ping t·ª´ user: ${dataDecode.id}`);
                            socket.emit('pong-client', { time: new Date() });
                        });
                    } else {
                        console.warn('Token kh√¥ng h·ª£p l·ªá');
                        socket.disconnect();
                    }
                })
                .catch((error) => {
                    console.error('‚ùå Socket authentication error:', error.message);
                    socket.disconnect();
                });
        } catch (error) {
            console.error('‚ùå Socket connection error:', error.message);
            return socket.disconnect();
        }
    }
}

module.exports = new SocketServices();
